const mongoose = require("mongoose")
const app = require("../app")
const debug = require("debug")("backend:server")
const http = require("http")
const startSocketServer = require("../socket/server")
const { namespaceListening } = require("../socket/server")
const { namespaces } = require("../socket/namespaces")
const { socketProtect } = require("../middlewares/auth")

let port = normalizePort(process.env.PORT || "3000")
const server = http.createServer(app)

function startSocket() {
  const io = startSocketServer(server)
  namespaces.map((namespace) => io.of(namespace).use(socketProtect))
  namespaces.map((namespace) => namespaceListening(io, namespace))
  console.log("socket listening...")
}

function startServer() {
  app.set("port", port)
  server.listen(port)
  server.on("error", onError)
  server.on("listening", () => {
    onListening()
    console.log("Listening on port: ", port)
  })
}

mongoose.set("strictQuery", false)
mongoose
  .connect(
    process.env.CONNECTION_STRING.replace("<password>", process.env.DB_PASSWORD)
  )
  .then(() => {
    startServer()
    startSocket()
    console.log("DB connected successfully!")
  })
  .catch((err) => console.error(err))

function normalizePort(val) {
  const port = parseInt(val, 10)
  if (isNaN(port)) return val
  if (port >= 0) return port
  return false
}

function onError(error) {
  if (error.syscall !== "listen") throw error

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges")
      process.exit(1)
    case "EADDRINUSE":
      console.error(bind + " is already in use")
      port = parseInt(port) + 1
      startServer()
      startSocket()
      break
    default:
      console.log(error)
      throw error
  }
}

function onListening() {
  const addr = server.address()
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port
  debug("Listening on " + bind)
  console.log("listening on " + bind)
}
